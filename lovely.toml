[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

## Add globals
[[patches]]
[patches.pattern]
target = "main.lua"
pattern = '''function love.load()'''
position = "before"
payload = '''
Kino = {}
Kino.jokers = {}
'''
match_indent = true

### The Thing Functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if flush_calc then"
position = "after"
payload = '''
if next(find_joker('j_kino_thing')) and (self.base.suit == G.GAME.current_round.kino_thing_card.suit) then
	return true
end

if next(find_joker('j_kino_sleepy_hollow')) and (SMODS.has_enhancement(self, 'm_kino_monster') or SMODS.has_enhancement(self, 'm_kino_horror')) then
	return true
end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.debuff and not bypass_debuff then return end"
position = "after"
payload = '''
if next(find_joker('j_kino_thing')) and (self.base.suit == G.GAME.current_round.kino_thing_card.suit) then
	return true
end

if next(find_joker('j_kino_sleepy_hollow')) and (SMODS.has_enhancement(self, 'm_kino_monster') or SMODS.has_enhancement(self, 'm_kino_horror')) then
	return true
end
'''
match_indent = true
overwrite = false


# Demonic Card patches
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local cards_destroyed = {}"
position = "after"
payload = '''
local has_demonic_card = false

for i = 1, #scoring_hand do
	if SMODS.has_enhancement(scoring_hand[i], 'm_kino_demonic') and not scoring_hand[i].debuff then
		has_demonic_card = true
	end
end

for i = 1, #scoring_hand do
	if has_demonic_card and not SMODS.has_enhancement(scoring_hand[i], 'm_kino_demonic') then
		if next(find_joker("j_kino_smile")) and not scoring_hand[i]:is_face() then
			cards_destroyed[#cards_destroyed + 1] = scoring_hand[i]
			G.GAME.current_round.sacrifices_made = G.GAME.current_round.sacrifices_made + 1
			scoring_hand[i].destroyed = true
		end
	end
end


'''
match_indent = true
overwrite = false

## Consumable Type code (Taken from Bunco)
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''local shared_sprite = (self.ability.set == 'Edition' or self.ability.set == 'Joker') and G.shared_undiscovered_joker or G.shared_undiscovered_tarot'''
position = 'after'
match_indent = true
payload = '''

if not G.shared_undiscovered_confection then G.shared_undiscovered_confection = Sprite(0, 0, G.CARD_W, G.CARD_H, G.ASSET_ATLAS['kino_confections'], {x = 1, y = 3}) end

if self.ability.set == 'confection' then
    shared_sprite = G.shared_undiscovered_confection
end

'''

## Hand upgrade system

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''G.GAME.hands[hand].chips = math.max(G.GAME.hands[hand].s_chips + G.GAME.hands[hand].l_chips*(G.GAME.hands[hand].level - 1), 0)'''
position = 'after'
match_indent = true
payload = '''
G.GAME.hands[hand].mult = G.GAME.hands[hand].mult + (G.GAME.hands[hand].mult_bonus or 0)
G.GAME.hands[hand].chips = G.GAME.hands[hand].chips + (G.GAME.hands[hand].chips_bonus or 0)
'''

## Add start round functionality
# 
[[patches]]
[patches.pattern]
target = 'functions/buttons_callback.lua'
pattern = '''
    if G.shop then 
      for i = 1, #G.jokers.cards do
        G.jokers.cards[i]:calculate_joker({ending_shop = true})
      end'''
position = 'after'
match_indent = true
payload = '''
	end_shopping()
'''

## From Bunco (line 2519 - 2549)
# tag functionality (hand_played before scoring)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'SMODS.calculate_context({full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, before = true})'
position = 'after'
match_indent = true
payload = '''

for i = 1, #G.GAME.tags do
    G.GAME.tags[i]:apply_to_run({type = 'hand_played', before = true, scoring_name = text})
end
'''

# Edition tags 2/5
# tag functionality (hand_played after scoring)
[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = "(?<indent>[\t ]*)else\\s*\\n[\\t ]*mult\\s*=\\s*mod_mult\\(\\s*0\\s*\\)\\s*\\n[\\t ]*hand_chips\\s*=\\s*mod_chips\\(\\s*0\\s*\\)\\s*"
position = 'before'
line_prepend = '$indent'
payload = '''

for i = 1, #G.GAME.tags do
    G.GAME.tags[i]:apply_to_run({type = 'hand_played', after = true})
end

'''

## End Bunco code
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "local ret = G.GAME.tags[i]:apply_to_run({type = 'eval'})"
position = 'after'
match_indent = true
payload = '''
local revenue = G.GAME.tags[i]:apply_to_run({type = 'eval_interest'})
'''

## High Score Counter
# if G.GAME.round_scores[score] and math.floor(amt) > G.GAME.round_scores[score].amt then
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = "if G.GAME.round_scores[score] and math.floor(amt) > G.GAME.round_scores[score].amt then"
position = 'after'
match_indent = true
payload = '''
if amt > 1 then
	G.GAME.current_round.beaten_run_high = G.GAME.current_round.beaten_run_high + 1
end
'''

## Add reroll cards to the code
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "G.GAME.round_bonus.next_hands = 0"
position = 'before'
match_indent = true
payload = '''

local blair = find_joker('j_kino_blair_witch')
G.GAME.current_round.free_rerolls = G.GAME.current_round.free_rerolls + #blair
calculate_reroll_cost(true)
'''

## Adds an additional check for :can_sell_card so
## some cards cannot be sold
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "self.area.config.type == 'joker' and"
position = 'after'
match_indent = true
payload = '''
self.config.center.can_be_sold ~= false and
'''

## Adds an additional check for :can_sell_card so
## some cards cannot be sold
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = "elseif card.config.center.set == 'Spectral' then  G.GAME.consumeable_usage_total.spectral = G.GAME.consumeable_usage_total.spectral + 1"
position = 'after'
match_indent = true
payload = '''
elseif card.config.center.set == 'confection' then
	if not G.GAME.consumeable_usage_total.confection then
		G.GAME.consumeable_usage_total.confection = 0
	end
	G.GAME.consumeable_usage_total.confection = G.GAME.consumeable_usage_total.confection + 1
'''

## Lucky card changes for the Prestige
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "if pseudorandom('lucky_money') < G.GAME.probabilities.normal/15 then"
position = 'at'
match_indent = true
payload = '''
if pseudorandom('lucky_money') < (G.GAME.probabilities.normal * (self.ability.lucky_bonus or 1))/15 then
'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "if pseudorandom('lucky_mult') < G.GAME.probabilities.normal/5 then"
position = 'at'
match_indent = true
payload = '''
if pseudorandom('lucky_mult') < (G.GAME.probabilities.normal * (self.ability.lucky_bonus or 1))/5 then
'''
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "elseif _c.effect == 'Lucky Card' then loc_vars = {G.GAME.probabilities.normal, cfg.mult, 5, cfg.p_dollars, 15}"
position = 'at'
match_indent = true
payload = '''
elseif _c.effect == 'Lucky Card' then loc_vars = {G.GAME.probabilities.normal * (cfg.lucky_bonus or 1), cfg.mult, 5, cfg.p_dollars, 15}
'''

# # Boss Blind unabduct
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "G.FUNCS.draw_from_discard_to_deck()"
position = 'after'
match_indent = true
payload = '''
if G.GAME.blind:get_type() == 'Boss' then
	G.FUNCS.draw_from_area_to_abduction()  
    G.E_MANAGER:add_event(Event({
        trigger = 'after',
		delay = 0.3,
        func = (function()  
			Kino.abduction_end()
	        return true end)
	}))
end
'''


# Abduction functionality
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "check_for_unlock({type = 'play_all_hearts'})"
position = 'after'
match_indent = true
payload = '''
G.FUNCS.draw_from_area_to_abduction()
'''

# 
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''
if (not v.shattered) and (not v.destroyed) then 
'''
position = 'at'
match_indent = true
payload = '''
if (not v.shattered) and (not v.destroyed) and (not v.abducted) then 
'''


# 
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''
if G.GAME.blind.name == 'The Serpent' and
'''
position = 'before'
match_indent = true
payload = '''
if next(find_joker('j_kino_insomnia')) and
(G.GAME.current_round.hands_played > 0 or
G.GAME.current_round.discards_used > 0) then 
	SMODS.calculate_context({insomnia_awake = true})
	return
end
'''

# Allows booster packs to have adjustable weight
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''
for k, v in ipairs(G.P_CENTER_POOLS['Booster']) do
	if (not _type or _type == v.kind) and not G.GAME.banned_keys[v.key] then cume = cume + (v.weight or 1 ) end
end
'''
position = 'at'
match_indent = true
payload = '''
for k, v in ipairs(G.P_CENTER_POOLS['Booster']) do
	local _weight = v.get_weight and v:get_weight() or v.weight
	if (not _type or _type == v.kind) and not G.GAME.banned_keys[v.key] then cume = cume + (_weight or 1 ) end
end
'''

# Patch SMODS for snackbag CardArea
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''
-- TARGET: add your own CardAreas for joker evaluation
'''
position = "after"
payload = '''
table.insert(t, Kino.snackbag)
'''
match_indent = true
times = 1

## Patch generate_card_ui to allow for main_start and main_end in info_queue
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''
    for _, v in ipairs(info_queue) do
        generate_card_ui(v, full_UI_table)
    end
'''
position = "at"
payload = '''
    for _, v in ipairs(info_queue) do
        generate_card_ui(v, full_UI_table, nil, nil, nil, nil, v.main_start, v.main_end)
    end
'''
match_indent = true
times = 1

# generate_card_ui(self.config.center, nil, loc_vars, card_type, badges, hide_desc, main_start, main_end)